package edu.uwb.braingrid.workbench.ui;

import edu.uwb.braingrid.workbench.FileManager;
import edu.uwb.braingrid.workbench.data.InputAnalyzer;
import edu.uwb.braingrid.workbench.data.InputAnalyzer.InputType;
import edu.uwb.braingrid.workbench.data.InputConfigurationManager;
import edu.uwb.braingrid.workbench.model.InputConfiguration;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;

/**
 *
 * @author Nathan Duncan
 */
public class InputConfigurationDialog extends javax.swing.JDialog {
    // <editor-fold defaultstate="collapsed" desc="Auto-Generated Code">    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        simulatorConfigurationPanel = new javax.swing.JPanel();
        fracEXC_label = new javax.swing.JLabel();
        fracEXC_textField = new javax.swing.JTextField();
        starterNeurons_label = new javax.swing.JLabel();
        starterNeurons_textField = new javax.swing.JTextField();
        poolSizeX_label = new javax.swing.JLabel();
        poolSizeX_textField = new javax.swing.JTextField();
        poolSizeY_label = new javax.swing.JLabel();
        poolSizeY_textField = new javax.swing.JTextField();
        poolSizeZ_label = new javax.swing.JLabel();
        poolSizeZ_textField = new javax.swing.JTextField();
        seedValue_label = new javax.swing.JLabel();
        seedValue_textField = new javax.swing.JTextField();
        neuron_synapseParametersPanel = new javax.swing.JPanel();
        I_InjectMin_label = new javax.swing.JLabel();
        I_InjectMin_textField = new javax.swing.JTextField();
        I_NoiseMin_label = new javax.swing.JLabel();
        I_NoiseMin_textField = new javax.swing.JTextField();
        V_ThreshMin_label = new javax.swing.JLabel();
        V_ThreshMin_textField = new javax.swing.JTextField();
        V_RestingMin_label = new javax.swing.JLabel();
        V_RestingMin_textField = new javax.swing.JTextField();
        V_ResetMin_label = new javax.swing.JLabel();
        V_ResetMin_textField = new javax.swing.JTextField();
        V_InitMin_label = new javax.swing.JLabel();
        V_InitMin_textField = new javax.swing.JTextField();
        I_InjectMax_label = new javax.swing.JLabel();
        I_InjectMax_textField = new javax.swing.JTextField();
        I_NoiseMax_label = new javax.swing.JLabel();
        I_NoiseMax_textField = new javax.swing.JTextField();
        V_ThreshMax_label = new javax.swing.JLabel();
        V_ThreshMax_textField = new javax.swing.JTextField();
        V_RestingMax_label = new javax.swing.JLabel();
        V_RestingMax_textField = new javax.swing.JTextField();
        V_ResetMax_label = new javax.swing.JLabel();
        V_ResetMax_textField = new javax.swing.JTextField();
        V_InitMax_label = new javax.swing.JLabel();
        V_InitMax_textField = new javax.swing.JTextField();
        neuronParameters_starterPanel = new javax.swing.JPanel();
        starterVThreshMin_label = new javax.swing.JLabel();
        starterVThreshMin_textField = new javax.swing.JTextField();
        starterVResetMin_label = new javax.swing.JLabel();
        starterVResetMin_textField = new javax.swing.JTextField();
        starterVThreshMax_label = new javax.swing.JLabel();
        starterVThreshMax_textField = new javax.swing.JTextField();
        starterVResetMax_label = new javax.swing.JLabel();
        starterVResetMax_textField = new javax.swing.JTextField();
        growthParametersPanel = new javax.swing.JPanel();
        epsilon_label = new javax.swing.JLabel();
        epsilon_textField = new javax.swing.JTextField();
        beta_label = new javax.swing.JLabel();
        beta_textField = new javax.swing.JTextField();
        rho_label = new javax.swing.JLabel();
        rho_textField = new javax.swing.JTextField();
        targetRate_label = new javax.swing.JLabel();
        targetRate_textField = new javax.swing.JTextField();
        minRadius_label = new javax.swing.JLabel();
        minRadius_textField = new javax.swing.JTextField();
        startRadius_label = new javax.swing.JLabel();
        startRadius_textField = new javax.swing.JTextField();
        simulationParametersPanel = new javax.swing.JPanel();
        T_Sim_label = new javax.swing.JLabel();
        T_Sim_textField = new javax.swing.JTextField();
        numSims_label = new javax.swing.JLabel();
        numSims_textField = new javax.swing.JTextField();
        maxFiringRate_label = new javax.swing.JLabel();
        maxFiringRate_textField = new javax.swing.JTextField();
        MaxSynapsesPerNeuron_label = new javax.swing.JLabel();
        maxSynapsesPerNeuron_textField = new javax.swing.JTextField();
        externalFilesPanel = new javax.swing.JPanel();
        stateOutputFilename_label = new javax.swing.JLabel();
        stateOutputFilename_textField = new javax.swing.JTextField();
        activeNListFilename_label = new javax.swing.JLabel();
        activeNListFilename_textField = new javax.swing.JTextField();
        inhNListFilename_label = new javax.swing.JLabel();
        inhNListFilename_textField = new javax.swing.JTextField();
        probedNListFilename_label = new javax.swing.JLabel();
        probedNListFilename_textField = new javax.swing.JTextField();
        ANLImportButton = new javax.swing.JButton();
        INLImportButton = new javax.swing.JButton();
        PBLImportButton = new javax.swing.JButton();
        calcStateOutputFileNameButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        buildButton = new javax.swing.JButton();
        configFilename_textField = new javax.swing.JTextField();
        configFilename_label = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        messageLabel = new javax.swing.JLabel();
        messageLabelText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Simulator Configuration");

        tabs.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        fracEXC_label.setText("Fraction of excitatory neurons:");

        fracEXC_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fracEXC_textFieldFocusLost(evt);
            }
        });

        starterNeurons_label.setText("Fraction of starter neurons:");

        poolSizeX_label.setText("Size of neurons grid, x:");

        poolSizeY_label.setText("y:");

        poolSizeZ_label.setText("z:");

        seedValue_label.setText("Seed value:");

        javax.swing.GroupLayout simulatorConfigurationPanelLayout = new javax.swing.GroupLayout(simulatorConfigurationPanel);
        simulatorConfigurationPanel.setLayout(simulatorConfigurationPanelLayout);
        simulatorConfigurationPanelLayout.setHorizontalGroup(
            simulatorConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(simulatorConfigurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(simulatorConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(simulatorConfigurationPanelLayout.createSequentialGroup()
                        .addComponent(fracEXC_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fracEXC_textField))
                    .addGroup(simulatorConfigurationPanelLayout.createSequentialGroup()
                        .addComponent(starterNeurons_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(starterNeurons_textField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, simulatorConfigurationPanelLayout.createSequentialGroup()
                        .addComponent(poolSizeX_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(poolSizeX_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(poolSizeY_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(poolSizeY_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(poolSizeZ_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(poolSizeZ_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(simulatorConfigurationPanelLayout.createSequentialGroup()
                        .addComponent(seedValue_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seedValue_textField)))
                .addContainerGap())
        );
        simulatorConfigurationPanelLayout.setVerticalGroup(
            simulatorConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(simulatorConfigurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(simulatorConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fracEXC_label)
                    .addComponent(fracEXC_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simulatorConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starterNeurons_label)
                    .addComponent(starterNeurons_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simulatorConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(poolSizeX_label)
                    .addComponent(poolSizeX_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(poolSizeY_label)
                    .addComponent(poolSizeY_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(poolSizeZ_label)
                    .addComponent(poolSizeZ_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simulatorConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seedValue_label)
                    .addComponent(seedValue_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabs.addTab("Simulator Configuration", simulatorConfigurationPanel);

        I_InjectMin_label.setText("Current to be injected into the LIF neuron, min:");

        I_NoiseMin_label.setText("Standard deviation of noise, min:");

        V_ThreshMin_label.setText("Threshold voltage, min:");

        V_RestingMin_label.setText("Resting membrane voltage, min:");

        V_ResetMin_label.setText("Voltage to reset Vm to after a spike, min:");

        V_InitMin_label.setText("Initial condition for Vm at time t = 0, min:");

        I_InjectMax_label.setText("max:");

        I_NoiseMax_label.setText("max:");

        V_ThreshMax_label.setText("max:");

        V_RestingMax_label.setText("max:");

        V_ResetMax_label.setText("max:");

        V_InitMax_label.setText("max:");

        javax.swing.GroupLayout neuron_synapseParametersPanelLayout = new javax.swing.GroupLayout(neuron_synapseParametersPanel);
        neuron_synapseParametersPanel.setLayout(neuron_synapseParametersPanelLayout);
        neuron_synapseParametersPanelLayout.setHorizontalGroup(
            neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neuron_synapseParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, neuron_synapseParametersPanelLayout.createSequentialGroup()
                        .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, neuron_synapseParametersPanelLayout.createSequentialGroup()
                                .addComponent(I_InjectMin_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(I_InjectMin_textField))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, neuron_synapseParametersPanelLayout.createSequentialGroup()
                                .addComponent(I_NoiseMin_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(I_NoiseMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(I_InjectMax_label)
                            .addComponent(I_NoiseMax_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(I_NoiseMax_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(I_InjectMax_textField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, neuron_synapseParametersPanelLayout.createSequentialGroup()
                        .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(neuron_synapseParametersPanelLayout.createSequentialGroup()
                                .addComponent(V_RestingMin_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(V_RestingMin_textField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(V_RestingMax_label))
                            .addGroup(neuron_synapseParametersPanelLayout.createSequentialGroup()
                                .addComponent(V_ThreshMin_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(V_ThreshMin_textField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(V_ThreshMax_label)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(V_ThreshMax_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(V_ResetMax_textField)
                            .addComponent(V_RestingMax_textField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, neuron_synapseParametersPanelLayout.createSequentialGroup()
                        .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(neuron_synapseParametersPanelLayout.createSequentialGroup()
                                .addComponent(V_InitMin_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(V_InitMin_textField))
                            .addGroup(neuron_synapseParametersPanelLayout.createSequentialGroup()
                                .addComponent(V_ResetMin_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(V_ResetMin_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(neuron_synapseParametersPanelLayout.createSequentialGroup()
                                .addComponent(V_ResetMax_label)
                                .addGap(160, 160, 160))
                            .addGroup(neuron_synapseParametersPanelLayout.createSequentialGroup()
                                .addComponent(V_InitMax_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(V_InitMax_textField)))))
                .addContainerGap())
        );
        neuron_synapseParametersPanelLayout.setVerticalGroup(
            neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neuron_synapseParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(I_InjectMin_label)
                    .addComponent(I_InjectMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(I_InjectMax_label)
                    .addComponent(I_InjectMax_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(I_NoiseMin_label)
                    .addComponent(I_NoiseMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(I_NoiseMax_label)
                    .addComponent(I_NoiseMax_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(V_ThreshMin_label)
                    .addComponent(V_ThreshMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(V_ThreshMax_label)
                    .addComponent(V_ThreshMax_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(V_RestingMin_label)
                    .addComponent(V_RestingMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(V_RestingMax_label)
                    .addComponent(V_RestingMax_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(V_ResetMin_label)
                    .addComponent(V_ResetMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(V_ResetMax_label)
                    .addComponent(V_ResetMax_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuron_synapseParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(V_InitMin_label)
                    .addComponent(V_InitMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(V_InitMax_label)
                    .addComponent(V_InitMax_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("Neuron/Synapse", neuron_synapseParametersPanel);

        starterVThreshMin_label.setText("Threshold voltage, min:");

        starterVResetMin_label.setText("Voltage to reset Vm to after a spike, min:");

        starterVThreshMax_label.setText("max:");

        starterVResetMax_label.setText("max:");

        javax.swing.GroupLayout neuronParameters_starterPanelLayout = new javax.swing.GroupLayout(neuronParameters_starterPanel);
        neuronParameters_starterPanel.setLayout(neuronParameters_starterPanelLayout);
        neuronParameters_starterPanelLayout.setHorizontalGroup(
            neuronParameters_starterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neuronParameters_starterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(neuronParameters_starterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(neuronParameters_starterPanelLayout.createSequentialGroup()
                        .addComponent(starterVThreshMin_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(starterVThreshMin_textField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(starterVThreshMax_label))
                    .addGroup(neuronParameters_starterPanelLayout.createSequentialGroup()
                        .addComponent(starterVResetMin_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(starterVResetMin_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(starterVResetMax_label)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuronParameters_starterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(starterVResetMax_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(starterVThreshMax_textField))
                .addContainerGap())
        );
        neuronParameters_starterPanelLayout.setVerticalGroup(
            neuronParameters_starterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neuronParameters_starterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(neuronParameters_starterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starterVThreshMin_label)
                    .addComponent(starterVThreshMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starterVThreshMax_label)
                    .addComponent(starterVThreshMax_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuronParameters_starterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(neuronParameters_starterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(starterVResetMax_label)
                        .addComponent(starterVResetMax_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(neuronParameters_starterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(starterVResetMin_label)
                        .addComponent(starterVResetMin_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(163, Short.MAX_VALUE))
        );

        tabs.addTab("Neuron (Starter)", neuronParameters_starterPanel);

        epsilon_label.setText("Epsilon:");

        beta_label.setText("Beta:");

        rho_label.setText("Rho:");

        targetRate_label.setText("Target rate:");

        targetRate_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                targetRate_textFieldFocusLost(evt);
            }
        });

        minRadius_label.setText("Minimum radius:");

        startRadius_label.setText("Starting radius:");

        javax.swing.GroupLayout growthParametersPanelLayout = new javax.swing.GroupLayout(growthParametersPanel);
        growthParametersPanel.setLayout(growthParametersPanelLayout);
        growthParametersPanelLayout.setHorizontalGroup(
            growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(growthParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(growthParametersPanelLayout.createSequentialGroup()
                        .addComponent(epsilon_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(epsilon_textField))
                    .addGroup(growthParametersPanelLayout.createSequentialGroup()
                        .addComponent(startRadius_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startRadius_textField))
                    .addGroup(growthParametersPanelLayout.createSequentialGroup()
                        .addComponent(beta_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(beta_textField))
                    .addGroup(growthParametersPanelLayout.createSequentialGroup()
                        .addComponent(rho_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rho_textField))
                    .addGroup(growthParametersPanelLayout.createSequentialGroup()
                        .addComponent(targetRate_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetRate_textField))
                    .addGroup(growthParametersPanelLayout.createSequentialGroup()
                        .addComponent(minRadius_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minRadius_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)))
                .addContainerGap())
        );
        growthParametersPanelLayout.setVerticalGroup(
            growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(growthParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(epsilon_label)
                    .addComponent(epsilon_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(beta_label)
                    .addComponent(beta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rho_label)
                    .addComponent(rho_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetRate_label)
                    .addComponent(targetRate_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minRadius_label)
                    .addComponent(minRadius_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(growthParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startRadius_label)
                    .addComponent(startRadius_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("Growth", growthParametersPanel);

        T_Sim_label.setText("Length (seconds) of each epoch:");

        numSims_label.setText("Total number of epochs:");

        maxFiringRate_label.setText("Maximum firing rate:");

        MaxSynapsesPerNeuron_label.setText("Maximum number of synapses per neuron:");

        javax.swing.GroupLayout simulationParametersPanelLayout = new javax.swing.GroupLayout(simulationParametersPanel);
        simulationParametersPanel.setLayout(simulationParametersPanelLayout);
        simulationParametersPanelLayout.setHorizontalGroup(
            simulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(simulationParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(simulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(simulationParametersPanelLayout.createSequentialGroup()
                        .addComponent(T_Sim_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(T_Sim_textField))
                    .addGroup(simulationParametersPanelLayout.createSequentialGroup()
                        .addComponent(MaxSynapsesPerNeuron_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxSynapsesPerNeuron_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                    .addGroup(simulationParametersPanelLayout.createSequentialGroup()
                        .addComponent(numSims_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numSims_textField))
                    .addGroup(simulationParametersPanelLayout.createSequentialGroup()
                        .addComponent(maxFiringRate_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxFiringRate_textField)))
                .addContainerGap())
        );
        simulationParametersPanelLayout.setVerticalGroup(
            simulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(simulationParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(simulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T_Sim_label)
                    .addComponent(T_Sim_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numSims_label)
                    .addComponent(numSims_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxFiringRate_label)
                    .addComponent(maxFiringRate_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simulationParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MaxSynapsesPerNeuron_label)
                    .addComponent(maxSynapsesPerNeuron_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        tabs.addTab("Simulation", simulationParametersPanel);

        stateOutputFilename_label.setText("State output file name:");

        activeNListFilename_label.setText("Active neuron list file name:");

        activeNListFilename_textField.setEnabled(false);

        inhNListFilename_label.setText("Inhibitory neuron list file name:");

        inhNListFilename_textField.setEnabled(false);

        probedNListFilename_label.setText("Probed neuron list file name:");

        probedNListFilename_textField.setEnabled(false);

        ANLImportButton.setText("Import");
        ANLImportButton.setToolTipText("<html>Import neuron list<br>exported from NLEdit<br>(found in the Tools menu)</html>");
        ANLImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ANLImportButtonActionPerformed(evt);
            }
        });

        INLImportButton.setText("Import");
        INLImportButton.setToolTipText("<html>Import neuron list<br>exported from NLEdit<br>(found in the Tools menu)</html>");
        INLImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INLImportButtonActionPerformed(evt);
            }
        });

        PBLImportButton.setText("Import");
        PBLImportButton.setToolTipText("<html>Import neuron list<br>exported from NLEdit<br>(found in the Tools menu)</html>");
        PBLImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PBLImportButtonActionPerformed(evt);
            }
        });

        calcStateOutputFileNameButton.setText("Calculate");
        calcStateOutputFileNameButton.setToolTipText("<html>Automatically generate the filename<br>based on simulation constants</html>");
        calcStateOutputFileNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcStateOutputFileNameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout externalFilesPanelLayout = new javax.swing.GroupLayout(externalFilesPanel);
        externalFilesPanel.setLayout(externalFilesPanelLayout);
        externalFilesPanelLayout.setHorizontalGroup(
            externalFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(externalFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(externalFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(externalFilesPanelLayout.createSequentialGroup()
                        .addComponent(stateOutputFilename_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stateOutputFilename_textField))
                    .addGroup(externalFilesPanelLayout.createSequentialGroup()
                        .addComponent(activeNListFilename_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(activeNListFilename_textField))
                    .addGroup(externalFilesPanelLayout.createSequentialGroup()
                        .addComponent(inhNListFilename_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inhNListFilename_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                    .addGroup(externalFilesPanelLayout.createSequentialGroup()
                        .addComponent(probedNListFilename_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(probedNListFilename_textField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(externalFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PBLImportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calcStateOutputFileNameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ANLImportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(INLImportButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        externalFilesPanelLayout.setVerticalGroup(
            externalFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(externalFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(externalFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateOutputFilename_label)
                    .addComponent(stateOutputFilename_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calcStateOutputFileNameButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(externalFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activeNListFilename_label)
                    .addComponent(activeNListFilename_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ANLImportButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(externalFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inhNListFilename_label)
                    .addComponent(inhNListFilename_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(INLImportButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(externalFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(probedNListFilename_label)
                    .addComponent(probedNListFilename_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PBLImportButton))
                .addContainerGap(112, Short.MAX_VALUE))
        );

        tabs.addTab("Files", externalFilesPanel);

        tabs.setSelectedIndex(5);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buildButton.setText("Build");
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButtonActionPerformed(evt);
            }
        });

        configFilename_textField.setEnabled(false);

        configFilename_label.setText("Config Filename:");

        messageLabel.setText("Message:");

        messageLabelText.setText("None");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buildButton)
                        .addGap(18, 18, 18)
                        .addComponent(configFilename_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(configFilename_textField)
                        .addGap(18, 18, 18)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messageLabelText)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(tabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageLabel)
                    .addComponent(messageLabelText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(buildButton)
                    .addComponent(configFilename_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(configFilename_label))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildButtonActionPerformed
        try {
            icm.purgeStoredValues();
            // simulator configuration tab
            icm.addParameterValue(InputConfiguration.LSM_FRAC_EXC, fracEXC_textField.getText());
            icm.addParameterValue(InputConfiguration.LSM_START_NEURONS, starterNeurons_textField.getText());
            icm.addParameterValue(InputConfiguration.POOL_SIZE_X, poolSizeX_textField.getText());
            icm.addParameterValue(InputConfiguration.POOL_SIZE_Y, poolSizeY_textField.getText());
            icm.addParameterValue(InputConfiguration.POOL_SIZE_Z, poolSizeZ_textField.getText());
            icm.addParameterValue(InputConfiguration.SEED_VALUE, seedValue_textField.getText());

            // neuron/synapse tab
            icm.addParameterValue(InputConfiguration.I_INJECT_MIN, I_InjectMin_textField.getText());
            icm.addParameterValue(InputConfiguration.I_INJECT_MAX, I_InjectMax_textField.getText());
            icm.addParameterValue(InputConfiguration.I_NOISE_MIN, I_NoiseMin_textField.getText());
            icm.addParameterValue(InputConfiguration.I_NOISE_MAX, I_NoiseMax_textField.getText());
            icm.addParameterValue(InputConfiguration.V_THRESH_MIN, V_ThreshMin_textField.getText());
            icm.addParameterValue(InputConfiguration.V_THRESH_MAX, V_ThreshMax_textField.getText());
            icm.addParameterValue(InputConfiguration.V_RESTING_MIN, V_RestingMin_textField.getText());
            icm.addParameterValue(InputConfiguration.V_RESTING_MAX, V_RestingMax_textField.getText());
            icm.addParameterValue(InputConfiguration.V_RESET_MIN, V_ResetMin_textField.getText());
            icm.addParameterValue(InputConfiguration.V_RESET_MAX, V_ResetMax_textField.getText());
            icm.addParameterValue(InputConfiguration.V_INIT_MIN, V_InitMin_textField.getText());
            icm.addParameterValue(InputConfiguration.V_INIT_MAX, V_InitMax_textField.getText());

            // neuron (starter) tab
            icm.addParameterValue(InputConfiguration.STARTER_V_THRESH_MIN, starterVThreshMin_textField.getText());
            icm.addParameterValue(InputConfiguration.STARTER_V_THRESH_MAX, starterVThreshMax_textField.getText());
            icm.addParameterValue(InputConfiguration.STARTER_V_RESET_MIN, starterVResetMin_textField.getText());
            icm.addParameterValue(InputConfiguration.STARTER_V_RESET_MAX, starterVResetMax_textField.getText());

            // growth tab
            icm.addParameterValue(InputConfiguration.GROWTH_PARAMS_EPSILON, epsilon_textField.getText());
            icm.addParameterValue(InputConfiguration.GROWTH_BETA, beta_textField.getText());
            icm.addParameterValue(InputConfiguration.GROWTH_PARAMS_RHO, rho_textField.getText());
            icm.addParameterValue(InputConfiguration.GROWTH_PARAMS_TARGET_RATE, targetRate_textField.getText());
            icm.addParameterValue(InputConfiguration.GROWTH_PARAMS_MIN_RADIUS, minRadius_textField.getText());
            icm.addParameterValue(InputConfiguration.GROWTH_PARAMS_START_RADIUS, startRadius_textField.getText());

            // simulation tab
            icm.addParameterValue(InputConfiguration.SIM_PARAMS_T_SIM, T_Sim_textField.getText());
            icm.addParameterValue(InputConfiguration.SIM_PARAMS_NUM_SIMS, numSims_textField.getText());
            icm.addParameterValue(InputConfiguration.SIM_PARAMS_MAX_FIRING_RATE, maxFiringRate_textField.getText());
            icm.addParameterValue(InputConfiguration.SIM_PARAMS_MAX_SYNAPSES_PER_NEURON, maxSynapsesPerNeuron_textField.getText());

            // files tab
            icm.addParameterValue(InputConfiguration.OUTPUT_PARAMS_STATE_OUTPUT_FILENAME, stateOutputFilename_textField.getText());
            icm.addParameterValue(InputConfiguration.LAYOUT_FILES_ACTIVE_N_LIST_FILE_NAME, activeNListFilename_textField.getText());
            icm.addParameterValue(InputConfiguration.LAYOUT_FILES_INH_N_LIST_FILE_NAME, inhNListFilename_textField.getText());
            icm.addParameterValue(InputConfiguration.LAYOUT_FILES_PROBED_N_LIST_FILE_NAME, probedNListFilename_textField.getText());

            try {
                String fileName = configFilename_textField.getText();
                if (fileName != null && !fileName.isEmpty()) {
                    fileName = icm.buildAndPersist(projectName, fileName);
                    if (fileName != null) {
                        okButton.setEnabled(true);
                        lastBuiltFile = fileName;
                        lastStateOutputFileName = stateOutputFilename_textField.getText();
                        messageLabelText.setText("<html><span style=\"color:green\">"
                                + FileManager.getSimpleFilename(fileName)
                                + " successfully persisted..."
                                + "</span></html>");
                    } else {
                        messageLabelText.setText("<html><span style=\"color:red\">*All fields must be filled</span></html>");
                    }
                }
            } catch (TransformerException | IOException e) {
                messageLabelText.setText("<html><span style=\"color:red\">"
                        + e.getClass()
                        + " prevented successful build...</span></html>");
                e.printStackTrace();
            }
        } catch (ParserConfigurationException ex) {
            messageLabelText.setText("<html><span style=\"color:red\">"
                    + ex.getClass()
                    + " prevented successful build...</span></html>");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_buildButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        okClicked = true;
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void ANLImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ANLImportButtonActionPerformed
        importNeuronList(InputType.ACTIVE, activeNListFilename_textField);
    }//GEN-LAST:event_ANLImportButtonActionPerformed

    private void INLImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INLImportButtonActionPerformed
        importNeuronList(InputType.INHIBITORY, inhNListFilename_textField);
    }//GEN-LAST:event_INLImportButtonActionPerformed

    private void PBLImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PBLImportButtonActionPerformed
        importNeuronList(InputType.PROBED, probedNListFilename_textField);
    }//GEN-LAST:event_PBLImportButtonActionPerformed

    private void calcStateOutputFileNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcStateOutputFileNameButtonActionPerformed
        String calculatedFilename = "";
        String fE = fracEXC_textField.getText();
        String tR = targetRate_textField.getText();
        if (!fE.isEmpty() && !tR.isEmpty()) {
            calculatedFilename = "results/tR_" + tR + "--fE_" + fE
                    + "_historyDump.xml";
        }
        stateOutputFilename_textField.setText(calculatedFilename);
    }//GEN-LAST:event_calcStateOutputFileNameButtonActionPerformed

    private void fracEXC_textFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fracEXC_textFieldFocusLost
        autoFillConfigFilename();
    }//GEN-LAST:event_fracEXC_textFieldFocusLost

    private void targetRate_textFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_targetRate_textFieldFocusLost
        autoFillConfigFilename();
    }//GEN-LAST:event_targetRate_textFieldFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ANLImportButton;
    private javax.swing.JButton INLImportButton;
    private javax.swing.JLabel I_InjectMax_label;
    private javax.swing.JTextField I_InjectMax_textField;
    private javax.swing.JLabel I_InjectMin_label;
    private javax.swing.JTextField I_InjectMin_textField;
    private javax.swing.JLabel I_NoiseMax_label;
    private javax.swing.JTextField I_NoiseMax_textField;
    private javax.swing.JLabel I_NoiseMin_label;
    private javax.swing.JTextField I_NoiseMin_textField;
    private javax.swing.JLabel MaxSynapsesPerNeuron_label;
    private javax.swing.JButton PBLImportButton;
    private javax.swing.JLabel T_Sim_label;
    private javax.swing.JTextField T_Sim_textField;
    private javax.swing.JLabel V_InitMax_label;
    private javax.swing.JTextField V_InitMax_textField;
    private javax.swing.JLabel V_InitMin_label;
    private javax.swing.JTextField V_InitMin_textField;
    private javax.swing.JLabel V_ResetMax_label;
    private javax.swing.JTextField V_ResetMax_textField;
    private javax.swing.JLabel V_ResetMin_label;
    private javax.swing.JTextField V_ResetMin_textField;
    private javax.swing.JLabel V_RestingMax_label;
    private javax.swing.JTextField V_RestingMax_textField;
    private javax.swing.JLabel V_RestingMin_label;
    private javax.swing.JTextField V_RestingMin_textField;
    private javax.swing.JLabel V_ThreshMax_label;
    private javax.swing.JTextField V_ThreshMax_textField;
    private javax.swing.JLabel V_ThreshMin_label;
    private javax.swing.JTextField V_ThreshMin_textField;
    private javax.swing.JLabel activeNListFilename_label;
    private javax.swing.JTextField activeNListFilename_textField;
    private javax.swing.JLabel beta_label;
    private javax.swing.JTextField beta_textField;
    private javax.swing.JButton buildButton;
    private javax.swing.JButton calcStateOutputFileNameButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel configFilename_label;
    private javax.swing.JTextField configFilename_textField;
    private javax.swing.JLabel epsilon_label;
    private javax.swing.JTextField epsilon_textField;
    private javax.swing.JPanel externalFilesPanel;
    private javax.swing.JLabel fracEXC_label;
    private javax.swing.JTextField fracEXC_textField;
    private javax.swing.JPanel growthParametersPanel;
    private javax.swing.JLabel inhNListFilename_label;
    private javax.swing.JTextField inhNListFilename_textField;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel maxFiringRate_label;
    private javax.swing.JTextField maxFiringRate_textField;
    private javax.swing.JTextField maxSynapsesPerNeuron_textField;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JLabel messageLabelText;
    private javax.swing.JLabel minRadius_label;
    private javax.swing.JTextField minRadius_textField;
    private javax.swing.JPanel neuronParameters_starterPanel;
    private javax.swing.JPanel neuron_synapseParametersPanel;
    private javax.swing.JLabel numSims_label;
    private javax.swing.JTextField numSims_textField;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel poolSizeX_label;
    private javax.swing.JTextField poolSizeX_textField;
    private javax.swing.JLabel poolSizeY_label;
    private javax.swing.JTextField poolSizeY_textField;
    private javax.swing.JLabel poolSizeZ_label;
    private javax.swing.JTextField poolSizeZ_textField;
    private javax.swing.JLabel probedNListFilename_label;
    private javax.swing.JTextField probedNListFilename_textField;
    private javax.swing.JLabel rho_label;
    private javax.swing.JTextField rho_textField;
    private javax.swing.JLabel seedValue_label;
    private javax.swing.JTextField seedValue_textField;
    private javax.swing.JPanel simulationParametersPanel;
    private javax.swing.JPanel simulatorConfigurationPanel;
    private javax.swing.JLabel startRadius_label;
    private javax.swing.JTextField startRadius_textField;
    private javax.swing.JLabel starterNeurons_label;
    private javax.swing.JTextField starterNeurons_textField;
    private javax.swing.JLabel starterVResetMax_label;
    private javax.swing.JTextField starterVResetMax_textField;
    private javax.swing.JLabel starterVResetMin_label;
    private javax.swing.JTextField starterVResetMin_textField;
    private javax.swing.JLabel starterVThreshMax_label;
    private javax.swing.JTextField starterVThreshMax_textField;
    private javax.swing.JLabel starterVThreshMin_label;
    private javax.swing.JTextField starterVThreshMin_textField;
    private javax.swing.JLabel stateOutputFilename_label;
    private javax.swing.JTextField stateOutputFilename_textField;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JLabel targetRate_label;
    private javax.swing.JTextField targetRate_textField;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Custom Members"> 
    private InputConfigurationManager icm;
    private boolean okClicked = false;
    private String lastBuiltFile = null;
    private String lastStateOutputFileName = null;
    private String projectName = null;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Construction"> 
    /**
     * 
     * @param projectName
     * @param modal
     * @param configFilename 
     */
    public InputConfigurationDialog(String projectName, boolean modal,
            String configFilename) {
        initComponents();
        setModal(modal);
        this.projectName = projectName;
        try {
            icm = new InputConfigurationManager(configFilename);
        } catch (Exception e) {
            System.err.println(e.toString());
        }
        if (icm != null) {
            setInitValues();            
            okButton.setEnabled(false);

            // show window center-screen
            pack();
            center();
            setVisible(true);
        }
    }   
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Getters/Setters">
    public boolean getSuccess() {
        return okClicked;
    }

    public String getBuiltFile() {
        String builtFile = null;
        if (okClicked) {
            builtFile = lastBuiltFile;
        }
        return builtFile;
    }
    
    public String getStateOutputFilename() {
        String fileName = null;
        if(okClicked){
            fileName = lastStateOutputFileName;
        }
        return fileName;
    }
    
    // set up each of the text fields with default values
    private void setInitValues() {
        // simulator configuration tab
        fracEXC_textField.setText(icm.getInitValue(InputConfiguration.LSM_FRAC_EXC));
        starterNeurons_textField.setText(icm.getInitValue(InputConfiguration.LSM_START_NEURONS));
        poolSizeX_textField.setText(icm.getInitValue(InputConfiguration.POOL_SIZE_X));
        poolSizeY_textField.setText(icm.getInitValue(InputConfiguration.POOL_SIZE_Y));
        poolSizeZ_textField.setText(icm.getInitValue(InputConfiguration.POOL_SIZE_Z));
        seedValue_textField.setText(icm.getInitValue(InputConfiguration.SEED_VALUE));

        // neuron/synapse tab
        I_InjectMin_textField.setText(icm.getInitValue(InputConfiguration.I_INJECT_MIN));
        I_InjectMax_textField.setText(icm.getInitValue(InputConfiguration.I_INJECT_MAX));
        I_NoiseMin_textField.setText(icm.getInitValue(InputConfiguration.I_NOISE_MIN));
        I_NoiseMax_textField.setText(icm.getInitValue(InputConfiguration.I_NOISE_MAX));
        V_ThreshMin_textField.setText(icm.getInitValue(InputConfiguration.V_THRESH_MIN));
        V_ThreshMax_textField.setText(icm.getInitValue(InputConfiguration.V_THRESH_MAX));
        V_RestingMin_textField.setText(icm.getInitValue(InputConfiguration.V_RESTING_MIN));
        V_RestingMax_textField.setText(icm.getInitValue(InputConfiguration.V_RESTING_MAX));
        V_ResetMin_textField.setText(icm.getInitValue(InputConfiguration.V_RESET_MIN));
        V_ResetMax_textField.setText(icm.getInitValue(InputConfiguration.V_RESET_MAX));
        V_InitMin_textField.setText(icm.getInitValue(InputConfiguration.V_INIT_MIN));
        V_InitMax_textField.setText(icm.getInitValue(InputConfiguration.V_INIT_MAX));

        // neuron (starter) tab
        starterVThreshMin_textField.setText(icm.getInitValue(InputConfiguration.STARTER_V_THRESH_MIN));
        starterVThreshMax_textField.setText(icm.getInitValue(InputConfiguration.STARTER_V_THRESH_MAX));
        starterVResetMin_textField.setText(icm.getInitValue(InputConfiguration.STARTER_V_RESET_MIN));
        starterVResetMax_textField.setText(icm.getInitValue(InputConfiguration.STARTER_V_RESET_MAX));

        // growth tab
        epsilon_textField.setText(icm.getInitValue(InputConfiguration.GROWTH_PARAMS_EPSILON));
        beta_textField.setText(icm.getInitValue(InputConfiguration.GROWTH_BETA));
        rho_textField.setText(icm.getInitValue(InputConfiguration.GROWTH_PARAMS_RHO));
        targetRate_textField.setText(icm.getInitValue(InputConfiguration.GROWTH_PARAMS_TARGET_RATE));
        minRadius_textField.setText(icm.getInitValue(InputConfiguration.GROWTH_PARAMS_MIN_RADIUS));
        startRadius_textField.setText(icm.getInitValue(InputConfiguration.GROWTH_PARAMS_START_RADIUS));

        // simulation tab
        T_Sim_textField.setText(icm.getInitValue(InputConfiguration.SIM_PARAMS_T_SIM));
        numSims_textField.setText(icm.getInitValue(InputConfiguration.SIM_PARAMS_NUM_SIMS));
        maxFiringRate_textField.setText(icm.getInitValue(InputConfiguration.SIM_PARAMS_MAX_FIRING_RATE));
        maxSynapsesPerNeuron_textField.setText(icm.getInitValue(InputConfiguration.SIM_PARAMS_MAX_SYNAPSES_PER_NEURON));

        // files tab
        stateOutputFilename_textField.setText(icm.getInitValue(InputConfiguration.OUTPUT_PARAMS_STATE_OUTPUT_FILENAME));

        // autofill config filename
        autoFillConfigFilename();
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="UI Manipulation">
    private void center() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2);
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Utils">
    private void importNeuronList(InputType type, JTextField field) {
        FileManager fm = FileManager.getFileManager();
        // get starting folder
        String simConfFilesDir;
        try {
            simConfFilesDir = fm.getSimConfigDirectoryPath(projectName, true);
        } catch (IOException e) {
            messageLabelText.setText(
                    "<html><span style=\"color:red\">"
                    + e.getClass()
                    + "occurred, import failed...</span></html>");
            return;
        }
        JFileChooser dlg = new JFileChooser(simConfFilesDir);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "XML file (*.xml)", "xml");
        dlg.addChoosableFileFilter(filter);
        dlg.setFileFilter(filter);
        dlg.setMultiSelectionEnabled(true);
        String dialogTitle = "Select Input Files for a Simulation";
        dlg.setDialogTitle(dialogTitle);
        if (dlg.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = dlg.getSelectedFile();
                // if type is correct
                if (InputAnalyzer.getInputType(file) == type) {
                    Path sourceFilePath = file.toPath();
                    String destPathText = fm.getNeuronListFilePath(projectName,
                            file.getName(), true);
                    Path destFilePath = new File(destPathText).toPath();
                    if (FileManager.copyFile(sourceFilePath, destFilePath)) {
                        field.setText("workbenchconfigfiles/NList/"
                                + fm.getSimpleFilename(destFilePath.toString()));
                    }
                } else {
                    messageLabelText.setText("<html><span style=\"color:orange\">"
                            + "The selected file did not match the type: "
                            + type.toString() + "</span></html>");
                }
            } catch (ParserConfigurationException | SAXException |
                    IOException ex) {
                messageLabelText.setText(
                        "<html><span style=\"color:red\">"
                        + ex.getClass()
                        + "occurred, import failed...</span></html>");
            }
        } else {
            messageLabelText.setText(
                    "<html><span style=\"color:red\">"
                    + "Import Cancelled...</span></html>");
        }
    }

    private void autoFillConfigFilename() {
        String calculatedFilename = "";
        String fE = fracEXC_textField.getText();
        String tR = targetRate_textField.getText();
        if (!fE.isEmpty() && !tR.isEmpty()) {
            calculatedFilename = "tR_" + tR + "--fE_" + fE
                    + ".xml";
        }
        configFilename_textField.setText(calculatedFilename);
    }
    // </editor-fold>
}
