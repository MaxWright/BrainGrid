package edu.uwb.braingrid.workbench.ui;

import edu.uwb.braingrid.workbench.FileManager;
import edu.uwb.braingrid.workbench.data.DynamicInputConfigurationManager;
import edu.uwb.braingrid.workbench.data.InputAnalyzer;
import edu.uwb.braingrid.workbench.data.InputAnalyzer.InputType;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Path;
import java.util.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.*;
import org.xml.sax.SAXException;

/**
 *
 * @author Tom Wong
 */
public class InputConfigClassSelectionDialog extends javax.swing.JDialog {
    private static final String allParamClassXMLFileURL = "/InputParamsClassTemplate/AllParamsClasses.xml";
    private static final String neuronsParamsClassesTagName = "NeuronsParamsClasses";
    private static final String synapsesParamsClassesTagName = "SynapsesParamsClasses";
    private static final String connectionsParamsClassesTagName = "ConnectionsParamsClasses";
    private static final String layoutParamsClassesTagName = "LayoutParamsClasses";
    private static final String nameAttributeName = "name";
    
    // <editor-fold defaultstate="collapsed" desc="Auto-Generated Code">    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        messageLabelText = new javax.swing.JLabel();
        neuronsParamsClassLbl = new javax.swing.JLabel();
        synapsesParamsClassLbl = new javax.swing.JLabel();
        connectionsParamsClassLbl = new javax.swing.JLabel();
        layoutParamsClassLbl = new javax.swing.JLabel();
        neuronsParamsClassCBox = new javax.swing.JComboBox<>();
        connectionsParamsClassCBox = new javax.swing.JComboBox<>();
        synapsesParamsClassCBox = new javax.swing.JComboBox<>();
        layoutParamsClassCBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Simulator Configuration");
        setSize(new java.awt.Dimension(200, 200));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        messageLabelText.setText("None");

        neuronsParamsClassLbl.setText("NeuronsParams Class:");

        synapsesParamsClassLbl.setText("SynapsesParams Class:");

        connectionsParamsClassLbl.setText("ConnectionsParams Class:");

        layoutParamsClassLbl.setText("LayoutParams Class:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageLabelText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(connectionsParamsClassLbl)
                            .addComponent(layoutParamsClassLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(synapsesParamsClassLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(neuronsParamsClassLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(neuronsParamsClassCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectionsParamsClassCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(synapsesParamsClassCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(layoutParamsClassCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 131, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(neuronsParamsClassLbl)
                    .addComponent(neuronsParamsClassCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(synapsesParamsClassLbl)
                    .addComponent(synapsesParamsClassCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionsParamsClassLbl)
                    .addComponent(connectionsParamsClassCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(layoutParamsClassLbl)
                    .addComponent(layoutParamsClassCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(messageLabelText))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        okClicked = true;
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> connectionsParamsClassCBox;
    private javax.swing.JLabel connectionsParamsClassLbl;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> layoutParamsClassCBox;
    private javax.swing.JLabel layoutParamsClassLbl;
    private javax.swing.JLabel messageLabelText;
    private javax.swing.JComboBox<String> neuronsParamsClassCBox;
    private javax.swing.JLabel neuronsParamsClassLbl;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox<String> synapsesParamsClassCBox;
    private javax.swing.JLabel synapsesParamsClassLbl;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Custom Members"> 
    private DynamicInputConfigurationManager icm;
    private Document xmlDoc = null;
    private boolean okClicked = false;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Construction"> 
    /**
     * 
     * @param projectName
     * @param modal
     * @param configFilename 
     */
    public InputConfigClassSelectionDialog(String projectName, boolean modal,
            String configFilename) {
        initComponents();
        setModal(modal);
        try {
            icm = new DynamicInputConfigurationManager(configFilename);
            xmlDoc = icm.getInputConfigDoc();
            loadParamsClassCBoxes(allParamClassXMLFileURL);
        } catch (Exception e) {
            System.err.println(e.toString());
        }
        if (icm != null) {
            // show window center-screen
            pack();
            center();
            setVisible(true);
        }
    }   
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Getters/Setters">
    public boolean getSuccess() {
        return okClicked;
    }

    public DynamicInputConfigurationManager getInputConfigMgr() {
        return icm;
    }
    
    private void loadParamsClassCBoxes(String aXMLFileURL) throws IOException, ParserConfigurationException, SAXException{
        Document allParamsClassesDoc = DocumentBuilderFactory.newInstance().
                newDocumentBuilder().parse(getClass().getResourceAsStream(aXMLFileURL));
        NodeList roots = allParamsClassesDoc.getChildNodes();
        
        for(int i = 0; i < roots.getLength(); i++){
            Node root = roots.item(i);
            if(root.getNodeType() == Node.ELEMENT_NODE){
                NodeList paramsClassesTypes = root.getChildNodes();
                for(int j = 0; j < paramsClassesTypes.getLength(); j++){
                    Node paramsClassesType = paramsClassesTypes.item(j);
                    if(paramsClassesType.getNodeType() == Node.ELEMENT_NODE){
                        NodeList paramsClasses = paramsClassesType.getChildNodes();
                        for(int k = 0; k < paramsClasses.getLength(); k++){
                            Node paramsClass = paramsClasses.item(k);
                            if(paramsClass.getNodeType() == Node.ELEMENT_NODE){
                                String className = ((Element)paramsClass).getAttribute(nameAttributeName);
                                String paramsClassesTypeName = paramsClassesType.getNodeName();
                                switch(paramsClassesTypeName){
                                    case neuronsParamsClassesTagName:
                                        neuronsParamsClassCBox.addItem(className);
                                        break;
                                    case synapsesParamsClassesTagName:
                                        synapsesParamsClassCBox.addItem(className);
                                        break;
                                    case connectionsParamsClassesTagName:
                                        connectionsParamsClassCBox.addItem(className);
                                        break;
                                    case layoutParamsClassesTagName:
                                        layoutParamsClassCBox.addItem(className);
                                        break;
                                }
                                           
                            }
                        }
                    }
                }
            }
        }
    };
    
    // set up each of the text fields with default values
    private void setInitValues() {
        // load values from template
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="UI Manipulation">
    private void center() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2);
    }
    // </editor-fold>
}
